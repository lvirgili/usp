\documentclass[a4 paper, 12pt]{article}
\usepackage[brazilian]{babel}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{minted}
\usepackage{anysize}
\marginsize{3cm}{3cm}{2cm}{2cm}
\usemintedstyle{tango}
\newminted{cpp}{linenos, mathescape, frame=topline, numberblanklines=false}
\newmint{cpp}{frame=single}
\usepackage{amsfonts}
\usepackage{algorithmic}
\usepackage[brazilian]{algorithm}
\renewcommand{\algorithmicrequire}{\textbf{Entrada:}}
\renewcommand{\algorithmicensure}{\textbf{Saída:}}
\renewcommand{\algorithmicend}{\textbf{fim}}
\renewcommand{\algorithmicif}{\textbf{se}}
\renewcommand{\algorithmicthen}{\textbf{então}}
\renewcommand{\algorithmicelse}{\textbf{else}}
\renewcommand{\algorithmicelsif}{\algorithmicelse\ \algorithmicif}
\renewcommand{\algorithmicendif}{\algorithmicend\ \algorithmicif}
\renewcommand{\algorithmicfor}{\textbf{para}}
\renewcommand{\algorithmicforall}{\textbf{para todos}}
\renewcommand{\algorithmicdo}{\textbf{faça}}
\renewcommand{\algorithmicendfor}{\algorithmicend}
\renewcommand{\algorithmicwhile}{\textbf{enquanto}}
\renewcommand{\algorithmicendwhile}{\algorithmicend}
\renewcommand{\algorithmicloop}{\textbf{loop}}
\renewcommand{\algorithmicendloop}{\algorithmicend\ \algorithmicloop}
\renewcommand{\algorithmicrepeat}{\textbf{repita}}
\renewcommand{\algorithmicuntil}{\textbf{enquanto}}
\renewcommand{\algorithmicprint}{\textbf{imprima}}
\renewcommand{\algorithmicreturn}{\textbf{retorne}}
\renewcommand{\algorithmictrue}{\textbf{verdadeiro}}
\renewcommand{\algorithmicfalse}{\textbf{falso}}


\renewcommand{\theFancyVerbLine}{
  \sffamily\textcolor[rgb]{0.5,0.5,0.5}{\scriptsize\arabic{FancyVerbLine}}}

\title{PCS5730: Projeto e Técnicas de Construção de Compiladores\\Trabalho}
\author{Lucas Virgili}
\date{}

\begin{document}
\maketitle
\tableofcontents
\newpage
\section{Fase 3}
\subsection{Sintaxe}

Usaremos a nota\c c\~ao EBNF (\emph{Extended Backus-Naur Form}) para
definir a sintaxe da nossa linguagem de programa\c c\~ao. A sintaxe de
uma linguagem de programa\c c\~ao define as constru\c c\~oes que s\~ao
corretas dentro da linguagem.

\subsection{Palavras reservadas}

As palavras que s\~ao reservadas dentro da nossa linguagem est\~ao
definidas na tabela \ref{tab1}.

\begin{table}[h]
\begin{center}
\begin{tabular}{|c|c|}
\hline
\textbf{Palavra}             & \textbf{Significado}                                                         \\ \hline
%program             & Usado para iniciar o programa \\ \hline
%begin               & In\'icio de um bloco \\ \hline
%end                 & Fim de um bloco \\ \hline
%is                  & Espeficicador de in\'icio de bloco \\ \hline
%are                 & Especificador de in\'icio de bloco de declara\c c\~oes \\ \hline
%declarations        & Usado para iniciar as declara\c c\~oes do programa \\ \hline
int                 & Usado para declarar vari\'aveis do tipo inteiro                     \\ \hline
real                & Usado para declarar vari\'aveis do tipo real                        \\ \hline
%sequence           & Calcula o en\'esimo termo de uma sequ\^encia           \\ \hline
take                & Retorna elementos de uma sequ\^encia                \\ \hline
series              & Calcula a soma parcial de uma sequ\^encia           \\ \hline
sequence\_converges & Checa se uma sequ\^encia converge                   \\ \hline
series\_converges   & Checa se uma s\'erie converge                   \\ \hline
$\sin$              & Fun\c c\~ao seno                                                    \\ \hline
$\cos$              & Fun\c c\~ao cosseno                                                 \\ \hline
$\tan$              & Fun\c c\~ao tangente                                                \\ \hline
$\log$              & Fun\c c\~ao logaritmo com base $e$                                  \\ \hline
$\exp$              & Fun\c c\~ao exponencial                                             \\ \hline
sqrt                & Fun\c c\~ao ra\'iz quadrada                                         \\ \hline
\end{tabular}
\caption{Palavras reservadas da linguagem}
\label{tab1}
\end{center}
\end{table}

\subsection{Regras l\'exicas}

Para definirmos as palavras v\'alidas na nossa linguagem, precisamos
definir o conjunto de caracteres que pertencem ao alfabeto da mesma,
os quais s\~ao combinados para formar as palavras.

Na nossa linguagem, as regras s\~ao as seguintes:
\begin{itemize}
\item Caracteres:
\begin{verbatim}
<letra> = "a" | "A" | "b" | "B" | "c" | "C" | "d" | "D" | "e" | "E" |
"f" | "F" | "g" | "G" | "h" | "H" | "i" | "I" | "j" | "J" | "k" | "K"
| "l" | "L" | "m" | "M" | "n" | "N" | "o" | "O" | "p" | "P" | "q" |
"Q" | "r" | "R" | "s" | "S" | "t" | "T" | "u" | "U" | "v" | "V" | "w"
| "W" | "x" | "X" | "y" | "Y" | "z" | "Z";

<char> = <letra> | "_";
\end{verbatim}

\item N\'umeros:
Primeiro precisamos definir os d\'igitos:
\begin{verbatim}
<dig> = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
<dig_sem_zero> = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
\end{verbatim}

Agora, os tipos num\'ericos:

\begin{verbatim}
<int> = [ "-" ], <dig_sem_zero>, { <dig> };
<real> = [ "-" ], <int>, [ "."{ dig } ];
<numero> = <int> | <real>;
\end{verbatim}

\item Vari\'aveis:
Os identificadores de vari\'aveis podem conter n\'umeros ou
caracteres, mas n\~ao poder\~ao come\c car com n\'umeros. Logo,
\begin{verbatim}
<id> = <char>{ <char> | <dig> };
\end{verbatim}

\item Operadores:
Os operadores aritm\'eticos s\~ao os \'unicos presentes:
\begin{verbatim}
<op> = + | - | * | /;
\end{verbatim}

\item Literais:
Os literais num\'ericos j\'a foram definidos, basta un\'i-los com os
identificadores:
\begin{verbatim}
<lit> = <int> | <real> | <id>;
\end{verbatim}
\end{itemize}

\subsection{Regras sint\'aticas}
As regras sint\'aticas da nossa linguagem est\~ao definidas e
comentadas em EBNF abaixo:
\begin{verbatim}
(* Definicao da linguagem *)
(* Definicao de um programa *)
<programa> = {<declaracoes> | <seq_expressoes> };

<seq_expressoes> = <expressao> | <seq_expressoes>;

(* Comandos *)

(* Declaracoes. Tipos possiveis sao int e real *)
<tipo> = `int' | `real';
<declaracoes> = {<tipo> <id>; | <sequence>};

(* Sequencias *)
<sequence> = (`sequence' <id> = <seq_expressoes>)

(* Funcoes builtin *)
<func> = ( sin | cos | tan | log | exp | sqrt ) `(' <expressao> `)';

(* take *)
<take> = take `(' <id> , <int> `)';

(* series *)
<series> = series `(' <id> , <int> `)';

(* Operadores de Convergencia *)
<seq_conv> = sequence_converges `(' <id>, <real> `)';
<series_conv> = series_converges `(' <id>, <real> `)';

(* Atribuicoes *)
<atr> = (<id> = <expressao>);

<cmd> = <atr> | <take> | <series> | <seq_conv> | <series_conv>;

(* Definicao de uma expressao *)
<expressao> = ( <expressao> + <termo> ) |
              ( <expressao> - <termo> ) |
              ( <termo> );

<termo> = ( <termo> * <fator> ) |
          ( <termo> / <fator> ) |
          ( <fator> );

<fator> = <id> | <cmd> | <func> | <numero> | <expressao>;

\end{verbatim}

\subsection{Exemplo de programa}
Um programa v\'alido na
nossa linguagem ser\'a algo como:
\begin{verbatim}
real pi;
pi = 3.1415;
sequence s = pi / n ^ 2;
s(3);
series(s, 3);
sequence_converges(s, 0.000001);
series_converges(s, 0.00001)
\end{verbatim}

\subsection{S\'imbolos terminais}
Os s\'imbolos terminais aceitos j\'a foram mencionados na descri\c
c\~ao acima: literais, caracteres, operadores, fun\c c\~oes e
identificadores.

\section{Fase 4}
Usaremos sem\^antica denotacional para definirmos a sem\^antica, isto
\'e, o significado das express\~oes da nossa linguagem.

\subsection{Dom\'inios sem\^anticos}
\begin{description}
\item[Estados]\hfill
  \begin{itemize}
  \item $\Sigma = \{\sigma, \sigma '\}$
  \end{itemize}
\item[N\'umeros]\hfill
  \begin{itemize}
  \item Inteiros = $\mathbb{Z}$
  \item Reais = $\mathbb{R}$
  \end{itemize}
\item[Valores]\hfill
  \begin{itemize}
  \item $Valores = Inteiros \cup Reais$
  \end{itemize}
\item[Fun\c c\~oes \emph{built-in}]\hfill
  \begin{itemize}
  \item $F = \{\sin, \cos, \tan, \log, \exp,$ $sqrt$, \\$series, take, sequence\_converges, series\_converges\}$
  \end{itemize}
\item[Identificadores]\hfill
  \begin{itemize}
  \item $id = \{X, Y, Z, \ldots\}$
  \end{itemize}
\item[Express\~oes]\hfill
  \begin{itemize}
  \item $exp = \{a_0, a_1, a_2, \ldots\}$
  \end{itemize}
\item[Blocos]\hfill
  \begin{itemize}
  \item $B = \{B_0, B_1, \ldots \}$
  \end{itemize}
\end{description}

\subsection{Fun\c c\~oes sem\^anticas}
\begin{description}
\item[Express\~oes]\hfill
  \begin{itemize}
  \item $E: exp \to (\Sigma \to Valores)$
  \end{itemize}
\item[Comandos]\hfill
  \begin{itemize}
  \item $C: cmd \to (\Sigma \to \Sigma)$
  \end{itemize}
\item[Sequ\^encias (Fun\c c\~oes)]\hfill
  \begin{itemize}
  \item $S = (\{0, 1, \ldots\} \to \Sigma
    \to \Sigma)$
  \end{itemize}
\end{description}

\subsection{Equa\c c\~oes sem\^anticas}
\begin{description}
\item[Express\~oes aritm\'eticas]\hfill
  \begin{itemize}
  \item Seja $n$ um n\'umero:\\
    $E[[n]] = \{(\sigma, n)\ |\ \sigma \in \Sigma\}$
  \item Seja $x$ um identificador:\\
    $E[[x]] = \{(\sigma, \sigma (x))\ |\ \sigma \in \Sigma\}$
  \item Seja $f$ uma fun\c c\~ao e $e$ uma express\~ao:\\
    $E[[f]] = \{(\sigma, \sigma (f(e)))\ |\ \sigma \in \Sigma\}$
  \item Adi\c c\~ao:\\
    $E[[a_0 + a_1]] = \{(\sigma, (n_0 + n_1))\ |\ (\sigma, n_0) \in
    E[[n_0]]\ \wedge\ (\sigma, n_1) \in E[[n_1]]\}$
  \item Subtra\c c\~ao:\\
    $E[[a_0 - a_1]] = \{(\sigma, (n_0- n_1))\ |\ (\sigma, n_0) \in
    E[[n_0]]\ \wedge\ (\sigma, n_1) \in E[[n_1]]\}$
  \item Multiplica\c c\~ao:\\
    $E[[a_0 * a_1]] = \{(\sigma, (n_0 * n_1))\ |\ (\sigma, n_0) \in
    E[[n_0]]\ \wedge\ (\sigma, n_1) \in E[[n_1]]\}$
  \item Divis\~ao:\\
    $E[[a_0 / a_1]] = \{(\sigma, (n_0 / n_1))\ |\ (\sigma, n_0) \in
    E[[n_0]]\ \wedge\ (\sigma, n_1) \in E[[n_1]]\}$
  \end{itemize}
\item[Comandos]\hfill
  \begin{itemize}
  \item Atribui\c c\~ao:
    \begin{itemize}
    \item Atribui\c c\~ao de n\'umeros:\\
      $C[[X = a]] = \{(\sigma, \sigma[n / X])\ |\ \sigma \in \Sigma\
      \wedge\ n = E[[a]]\sigma\}$

    \item ``Atribui\c c\~ao'' de sequ\^encias:\\
      $C[[S \mbox{ = B}]] = \{(\sigma, \sigma[n / S]\ |\ \sigma \in \Sigma\
      \wedge\ n = E[[B]]\sigma)$
    \end{itemize}
  \item Composi\c c\~ao:\\
    $C[[c_0;\ c_1]] = C[[c_1]]\ \circ\ C[[c_0]]$
  \end{itemize}
\end{description}

\end{document}